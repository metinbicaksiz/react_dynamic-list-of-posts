{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UsersContext.tsx","api/users.ts","components/UserSelector.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","onPostSelected","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onSubmit","useState","submitting","setSubmitting","name","setName","email","setEmail","body","setBody","touchedName","setTouchedName","touchedEmail","setTouchedEmail","touchedBody","setTouchedBody","isValid","Boolean","handleSubmit","event","a","preventDefault","onReset","htmlFor","placeholder","cn","value","onChange","target","onBlur","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","PostDetails","comments","setComments","loaded","setLoaded","hasError","setError","visible","setVisible","useEffect","postId","catch","finally","addComment","newComment","currentComments","filter","comment","commentsApi","length","href","UserContext","React","createContext","UsersProvider","children","users","setUsers","Provider","UserSelector","selectedUser","useContext","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","current","role","user","App","setPosts","author","setAuthor","selectedPost","setSelectedPost","loadUserPosts","userId","getUserPosts","Sidebar","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f48a0ccf.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n  onPostSelected: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onPostSelected,\n}) => (\n  <div\n    className=\"PostsList\"\n    data-cy=\"PostsList\"\n  >\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <th data-cy=\"PostId\">{post.id}</th>\n            <td data-cy=\"PostTitle\">{post.title}</td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onPostSelected(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [submitting, setSubmitting] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [touchedName, setTouchedName] = useState(false);\n  const [touchedEmail, setTouchedEmail] = useState(false);\n  const [touchedBody, setTouchedBody] = useState(false);\n\n  const isValid = Boolean(name && email && body);\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setTouchedName(false);\n    setTouchedEmail(false);\n    setTouchedBody(false);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isValid) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    await onSubmit({ name, email, body });\n    setSubmitting(false);\n\n    setBody('');\n    setTouchedName(false);\n    setTouchedEmail(false);\n    setTouchedBody(false);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      onReset={clearForm}\n      data-cy=\"NewCommentForm\"\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': touchedName,\n            })}\n            value={name}\n            onChange={event => setName(event.target.value)}\n            onBlur={() => setTouchedName(true)}\n          />\n          {\n            touchedName && (\n              <>\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-user\" />\n                </span>\n                {!name && (\n                  <span\n                    className=\"icon is-small is-right has-text-danger\"\n                    data-cy=\"ErrorIcon\"\n                  >\n                    <i className=\"fas fa-exclamation-triangle\" />\n                  </span>\n                )}\n\n                {!name && (\n                  <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                    Name is required\n                  </p>\n                )}\n              </>\n            )\n          }\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': touchedEmail })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n            onBlur={() => setTouchedEmail(true)}\n          />\n\n          {\n            touchedEmail && (\n              <>\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-envelope\" />\n                </span>\n                {!email && (\n                  <span\n                    className=\"icon is-small is-right has-text-danger\"\n                    data-cy=\"ErrorIcon\"\n                  >\n                    <i className=\"fas fa-exclamation-triangle\" />\n                  </span>\n                )}\n                {!email && (\n                  <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                    Email is required\n                  </p>\n                )}\n              </>\n            )\n          }\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': touchedBody })}\n            value={body}\n            onChange={event => setBody(event.target.value)}\n            onBlur={() => setTouchedBody(true)}\n          />\n        </div>\n\n        {\n          touchedBody && (\n            <>\n              {!body && (\n                <p className=\"help is-danger\" data-cy=\"BodyField\">\n                  Enter some text\n                </p>\n              )}\n            </>\n          )\n        }\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n            // disabled={!isValid}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n// const BASE_URL = 'https://mate-academy.github.io/fe-students-api/';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import { client } from '../utils/axiosClient';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport * as commentsApi from '../api/comments';\n\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  function loadComments() {\n    setLoaded(false);\n    setError(false);\n    setVisible(false);\n\n    commentsApi.getPostComments(post.id)\n      .then(setComments)\n      .catch(() => setError(true))\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(loadComments, [post.id]);\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await commentsApi.createComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== commentId,\n      ),\n    );\n\n    await commentsApi.deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n        <p data-cy=\"PostBody\">{post.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded && <Loader />}\n\n        {loaded && hasError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"CommentsError\"\n          >\n            Something went wrong\n          </div>\n        )}\n        {\n          loaded && !hasError && comments.length === 0 && (\n            <p\n              className={cn('', {\n                'title is-4': comments.length === 0,\n              })}\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )\n        }\n        {loaded && !hasError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n\n                  <button\n                    type=\"button\"\n                    data-cy=\"CommentDelete\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div\n                  className=\"message-body\"\n                  data-cy=\"CommentBody\"\n                >\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            type=\"button\"\n            data-cy=\"WriteCommentButton\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\nexport const UsersProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  value: selectedUser,\n  onChange,\n}) => {\n  const users = useContext(UserContext);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport cn from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const [author, setAuthor] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  function loadUserPosts(userId: number) {\n    setLoaded(false);\n\n    getUserPosts(userId)\n      .then(setPosts)\n      .catch(() => setError(true))\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (author) {\n      loadUserPosts(author.id);\n    } else {\n      setPosts([]);\n    }\n  }, [author?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector value={author} onChange={setAuthor} />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {!author && (\n                  <p\n                    data-cy=\"NoSelectedUser\"\n                  >\n                    No user selected\n                  </p>\n                )}\n\n                {author && !loaded && (\n                  <Loader />\n                )}\n\n                {author && loaded && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                    onPostSelected={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          {\n            posts.map(post => post.id === selectedPost?.id && (\n              <div\n                data-cy=\"Sidebar\"\n                className={cn('tile', 'is-parent', 'is-8-desktop', {\n                  Sidebar: selectedPost,\n                  'Sidebar--open': selectedPost,\n                })}\n              >\n                <div className=\"tile is-child box is-success \">\n                  {selectedPost ? (\n                    <PostDetails post={selectedPost} />\n                  ) : (\n                    <p>Choose a post</p>\n                  )}\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}